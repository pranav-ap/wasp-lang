#pragma once

#ifdef TOKEN_EXPORTS
#define TOKEN_API __declspec(dllexport)
#else
#define TOKEN_API __declspec(dllimport)
#endif

enum class TOKEN_API WTokenType
{
	NUMBER_LITERAL,
	STRING_LITERAL,

	IDENTIFIER,

	// Punctuations

	OPEN_PARENTHESIS,
	CLOSE_PARENTHESIS,
	OPEN_CURLY_BRACE,
	CLOSE_CURLY_BRACE,
	OPEN_SQUARE_BRACKET,
	CLOSE_SQUARE_BRACKET,
	OPEN_ANGLE_BRACKET,
	CLOSE_ANGLE_BRACKET,
	OPEN_FLOOR_BRACKET,
	CLOSE_FLOOR_BRACKET,

	BACKWARD_SLASH,
	COMMA,
	DOLLAR,
	COLON,
	COLON_COLON,
	VERTICAL_BAR,
	VERTICAL_BAR_GREATER_THAN,
	ARROW,
	QUESTION,
	DOT,
	DOT_DOT_DOT,
	QUESTION_DOT,

	PLUS,
	PLUS_EQUAL,

	MINUS,
	MINUS_EQUAL,

	STAR,
	STAR_EQUAL,

	DIVISION,
	DIVISION_EQUAL,

	REMINDER,
	REMINDER_EQUAL,

	POWER,
	POWER_EQUAL,

	EQUAL,
	EQUAL_EQUAL,

	BANG,
	BANG_EQUAL,

	LESSER_THAN,
	LESSER_THAN_EQUAL,

	GREATER_THAN,
	GREATER_THAN_EQUAL,

	// Keywords

	IF,
	ELIF,
	ELSE,

	THEN,
	DO,

	AND,
	OR,

	TILDE,

	LET,
	CONST_KEYWORD,

	WHILE,
	FOR,
	BREAK,
	CONTINUE,
	IN_KEYWORD,
	MATCH,
	CASE,
	END,

	MODULE_KEYWORD,

	IMPLORE,
	SWEAR,

	TYPE_OF,
	IS,

	FN,
	RETURN_KEYWORD,
	GEN,
	YIELD_KEYWORD,

	TYPE,
	NONE,
	INT,
	FLOAT,
	STRING_KEYWORD,
	BOOL,
	ENUM,
	ANY,
	OPT,

	INTERFACE,

	TRUE_KEYWORD,
	FALSE_KEYWORD,

	NEW,
	PUB,
	ASSERT,

	// Whitespace

	EOL,

	// Other

	COMMENT,
	UNKNOWN
};
