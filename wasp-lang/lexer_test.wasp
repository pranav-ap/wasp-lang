let a : num = 5
a

let a : [num] = [5]
a[3]

let a : opt [opt num] = [5]
a[3]

let a : (num, str) = (5, "john")
a[2]

let a : { str -> str } = { "name": "john" }
a["name"]

type hello {
  foo: bool,
  bar: str
}

let foo : hello = {
  bar : true,
  name : "jim"
}

foo.name

type length = int

let a : <str, int, bool> = 0

let a : [str, <int, bool>] = ["hello", 0]

if true {

} else if b > 4 {

} else {

}

loop { }

for x in vector { }

break
continue

pub fn add (a: num, b: num) -> num {
	return a + b
}

import { foo, bar } from "path/to/filename"
